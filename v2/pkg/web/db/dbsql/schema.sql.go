// Code generated by sqlc. DO NOT EDIT.
// source: schema.sql

package dbsql

import (
	"context"
	"database/sql"
)

const addIssue = `-- name: AddIssue :exec
INSERT INTO "public".issues
	(matchedat, title, severity, createdat, updatedat, scansource, issuestate, description, author, cvss, cwe, labels, issuedata, issuetemplate, remediation, debug, scanid) 
VALUES 
    ($1, $2, $3, NOW(), NOW(), $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
`

type AddIssueParams struct {
	Matchedat     sql.NullString
	Title         sql.NullString
	Severity      sql.NullString
	Scansource    sql.NullString
	Issuestate    sql.NullString
	Description   sql.NullString
	Author        sql.NullString
	Cvss          sql.NullFloat64
	Cwe           []int32
	Labels        []string
	Issuedata     sql.NullString
	Issuetemplate sql.NullString
	Remediation   sql.NullString
	Debug         sql.NullString
	Scanid        sql.NullInt64
}

func (q *Queries) AddIssue(ctx context.Context, arg AddIssueParams) error {
	_, err := q.db.Exec(ctx, addIssue,
		arg.Matchedat,
		arg.Title,
		arg.Severity,
		arg.Scansource,
		arg.Issuestate,
		arg.Description,
		arg.Author,
		arg.Cvss,
		arg.Cwe,
		arg.Labels,
		arg.Issuedata,
		arg.Issuetemplate,
		arg.Remediation,
		arg.Debug,
		arg.Scanid,
	)
	return err
}

const addScan = `-- name: AddScan :exec
INSERT INTO "public".scans
	(name, status, hosts, scansource, progress, templates, targets, debug) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type AddScanParams struct {
	Name       sql.NullString
	Status     sql.NullString
	Hosts      sql.NullInt64
	Scansource sql.NullString
	Progress   sql.NullFloat64
	Templates  []string
	Targets    []string
	Debug      sql.NullBool
}

func (q *Queries) AddScan(ctx context.Context, arg AddScanParams) error {
	_, err := q.db.Exec(ctx, addScan,
		arg.Name,
		arg.Status,
		arg.Hosts,
		arg.Scansource,
		arg.Progress,
		arg.Templates,
		arg.Targets,
		arg.Debug,
	)
	return err
}

const addTarget = `-- name: AddTarget :exec
INSERT INTO public.targets
	( name, createdat, updatedat, internalid, filename, total) VALUES ($1, NOW(), NOW(), $2, $3, $4)
`

type AddTargetParams struct {
	Name       sql.NullString
	Internalid sql.NullString
	Filename   sql.NullString
	Total      sql.NullInt64
}

func (q *Queries) AddTarget(ctx context.Context, arg AddTargetParams) error {
	_, err := q.db.Exec(ctx, addTarget,
		arg.Name,
		arg.Internalid,
		arg.Filename,
		arg.Total,
	)
	return err
}

const addTemplate = `-- name: AddTemplate :exec
INSERT INTO public.templates
( name, folder, "path", contents, createdat, updatedat) VALUES ($1, $2, $3 , $4, NOW(), NOW() )
`

type AddTemplateParams struct {
	Name     sql.NullString
	Folder   sql.NullString
	Path     string
	Contents string
}

func (q *Queries) AddTemplate(ctx context.Context, arg AddTemplateParams) error {
	_, err := q.db.Exec(ctx, addTemplate,
		arg.Name,
		arg.Folder,
		arg.Path,
		arg.Contents,
	)
	return err
}

const deleteIssue = `-- name: DeleteIssue :exec
DELETE FROM "public".issues WHERE id=$1
`

func (q *Queries) DeleteIssue(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteIssue, id)
	return err
}

const deleteScan = `-- name: DeleteScan :exec
DELETE FROM "public".scans WHERE id=$1
`

func (q *Queries) DeleteScan(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteScan, id)
	return err
}

const deleteTarget = `-- name: DeleteTarget :exec
DELETE FROM public.targets WHERE ID=$1
`

func (q *Queries) DeleteTarget(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTarget, id)
	return err
}

const deleteTemplate = `-- name: DeleteTemplate :exec
DELETE FROM public.templates WHERE path=$1
`

func (q *Queries) DeleteTemplate(ctx context.Context, path string) error {
	_, err := q.db.Exec(ctx, deleteTemplate, path)
	return err
}

const getIssue = `-- name: GetIssue :one
SELECT matchedat, title, severity, createdat, updatedat, scansource, issuestate, description, author, cvss, cwe, labels, 
	issuedata, issuetemplate, remediation, debug, id, scanid
FROM
	"public".issues WHERE id=$1 LIMIT 1
`

func (q *Queries) GetIssue(ctx context.Context, id int64) (Issue, error) {
	row := q.db.QueryRow(ctx, getIssue, id)
	var i Issue
	err := row.Scan(
		&i.Matchedat,
		&i.Title,
		&i.Severity,
		&i.Createdat,
		&i.Updatedat,
		&i.Scansource,
		&i.Issuestate,
		&i.Description,
		&i.Author,
		&i.Cvss,
		&i.Cwe,
		&i.Labels,
		&i.Issuedata,
		&i.Issuetemplate,
		&i.Remediation,
		&i.Debug,
		&i.ID,
		&i.Scanid,
	)
	return i, err
}

const getIssues = `-- name: GetIssues :many
SELECT id, scanid, matchedat, title, severity, createdat, updatedat, scansource
FROM
	"public".issues
`

type GetIssuesRow struct {
	ID         int64
	Scanid     sql.NullInt64
	Matchedat  sql.NullString
	Title      sql.NullString
	Severity   sql.NullString
	Createdat  sql.NullTime
	Updatedat  sql.NullTime
	Scansource sql.NullString
}

func (q *Queries) GetIssues(ctx context.Context) ([]GetIssuesRow, error) {
	rows, err := q.db.Query(ctx, getIssues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIssuesRow
	for rows.Next() {
		var i GetIssuesRow
		if err := rows.Scan(
			&i.ID,
			&i.Scanid,
			&i.Matchedat,
			&i.Title,
			&i.Severity,
			&i.Createdat,
			&i.Updatedat,
			&i.Scansource,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScan = `-- name: GetScan :one
SELECT name, status, scantime, hosts, scansource, progress, templates, targets, debug, id
FROM
	"public".scans WHERE id=$1 LIMIT 1
`

func (q *Queries) GetScan(ctx context.Context, id int64) (Scan, error) {
	row := q.db.QueryRow(ctx, getScan, id)
	var i Scan
	err := row.Scan(
		&i.Name,
		&i.Status,
		&i.Scantime,
		&i.Hosts,
		&i.Scansource,
		&i.Progress,
		&i.Templates,
		&i.Targets,
		&i.Debug,
		&i.ID,
	)
	return i, err
}

const getScans = `-- name: GetScans :many
SELECT id, name, status, scantime, hosts, scansource, progress
FROM
	"public".scans
`

type GetScansRow struct {
	ID         int64
	Name       sql.NullString
	Status     sql.NullString
	Scantime   sql.NullTime
	Hosts      sql.NullInt64
	Scansource sql.NullString
	Progress   sql.NullFloat64
}

func (q *Queries) GetScans(ctx context.Context) ([]GetScansRow, error) {
	rows, err := q.db.Query(ctx, getScans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetScansRow
	for rows.Next() {
		var i GetScansRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.Scantime,
			&i.Hosts,
			&i.Scansource,
			&i.Progress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTarget = `-- name: GetTarget :one
SELECT name, internalid, filename, total, createdat, updatedat
FROM
	public.targets WHERE ID=$1 LIMIT 1
`

type GetTargetRow struct {
	Name       sql.NullString
	Internalid sql.NullString
	Filename   sql.NullString
	Total      sql.NullInt64
	Createdat  sql.NullTime
	Updatedat  sql.NullTime
}

func (q *Queries) GetTarget(ctx context.Context, id int64) (GetTargetRow, error) {
	row := q.db.QueryRow(ctx, getTarget, id)
	var i GetTargetRow
	err := row.Scan(
		&i.Name,
		&i.Internalid,
		&i.Filename,
		&i.Total,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getTargetByName = `-- name: GetTargetByName :one
SELECT id, internalid, filename, total, createdat, updatedat
FROM
	public.targets WHERE name=$1 LIMIT 1
`

type GetTargetByNameRow struct {
	ID         int64
	Internalid sql.NullString
	Filename   sql.NullString
	Total      sql.NullInt64
	Createdat  sql.NullTime
	Updatedat  sql.NullTime
}

func (q *Queries) GetTargetByName(ctx context.Context, name sql.NullString) (GetTargetByNameRow, error) {
	row := q.db.QueryRow(ctx, getTargetByName, name)
	var i GetTargetByNameRow
	err := row.Scan(
		&i.ID,
		&i.Internalid,
		&i.Filename,
		&i.Total,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getTargets = `-- name: GetTargets :many
SELECT id, name, createdat, updatedat, internalid, filename, total
FROM
	public.targets
`

type GetTargetsRow struct {
	ID         int64
	Name       sql.NullString
	Createdat  sql.NullTime
	Updatedat  sql.NullTime
	Internalid sql.NullString
	Filename   sql.NullString
	Total      sql.NullInt64
}

func (q *Queries) GetTargets(ctx context.Context) ([]GetTargetsRow, error) {
	rows, err := q.db.Query(ctx, getTargets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTargetsRow
	for rows.Next() {
		var i GetTargetsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Createdat,
			&i.Updatedat,
			&i.Internalid,
			&i.Filename,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTargetsForSearch = `-- name: GetTargetsForSearch :many
SELECT id, name, createdat, updatedat, internalid, filename, total
FROM
	"public".targets WHERE name LIKE $1 OR filename LIKE $1
`

type GetTargetsForSearchRow struct {
	ID         int64
	Name       sql.NullString
	Createdat  sql.NullTime
	Updatedat  sql.NullTime
	Internalid sql.NullString
	Filename   sql.NullString
	Total      sql.NullInt64
}

func (q *Queries) GetTargetsForSearch(ctx context.Context, name sql.NullString) ([]GetTargetsForSearchRow, error) {
	rows, err := q.db.Query(ctx, getTargetsForSearch, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTargetsForSearchRow
	for rows.Next() {
		var i GetTargetsForSearchRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Createdat,
			&i.Updatedat,
			&i.Internalid,
			&i.Filename,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTemplateContents = `-- name: GetTemplateContents :one
SELECT contents FROM public.templates WHERE path=$1 LIMIT 1
`

func (q *Queries) GetTemplateContents(ctx context.Context, path string) (string, error) {
	row := q.db.QueryRow(ctx, getTemplateContents, path)
	var contents string
	err := row.Scan(&contents)
	return contents, err
}

const getTemplates = `-- name: GetTemplates :many
SELECT id, name, folder, "path", createdat, updatedat
FROM
	"public".templates
`

type GetTemplatesRow struct {
	ID        int64
	Name      sql.NullString
	Folder    sql.NullString
	Path      string
	Createdat sql.NullTime
	Updatedat sql.NullTime
}

func (q *Queries) GetTemplates(ctx context.Context) ([]GetTemplatesRow, error) {
	rows, err := q.db.Query(ctx, getTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTemplatesRow
	for rows.Next() {
		var i GetTemplatesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Folder,
			&i.Path,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTemplatesByFolder = `-- name: GetTemplatesByFolder :many
SELECT id, name, "path", createdat, updatedat
FROM
	"public".templates WHERE folder=$1
`

type GetTemplatesByFolderRow struct {
	ID        int64
	Name      sql.NullString
	Path      string
	Createdat sql.NullTime
	Updatedat sql.NullTime
}

func (q *Queries) GetTemplatesByFolder(ctx context.Context, folder sql.NullString) ([]GetTemplatesByFolderRow, error) {
	rows, err := q.db.Query(ctx, getTemplatesByFolder, folder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTemplatesByFolderRow
	for rows.Next() {
		var i GetTemplatesByFolderRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Path,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTemplatesBySearchKey = `-- name: GetTemplatesBySearchKey :many
SELECT id, name, folder, "path", createdat, updatedat
FROM
	"public".templates WHERE path LIKE $1
`

type GetTemplatesBySearchKeyRow struct {
	ID        int64
	Name      sql.NullString
	Folder    sql.NullString
	Path      string
	Createdat sql.NullTime
	Updatedat sql.NullTime
}

func (q *Queries) GetTemplatesBySearchKey(ctx context.Context, path string) ([]GetTemplatesBySearchKeyRow, error) {
	rows, err := q.db.Query(ctx, getTemplatesBySearchKey, path)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTemplatesBySearchKeyRow
	for rows.Next() {
		var i GetTemplatesBySearchKeyRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Folder,
			&i.Path,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIssue = `-- name: UpdateIssue :exec
UPDATE "public".issues SET issuestate='closed' WHERE id=$1
`

func (q *Queries) UpdateIssue(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateIssue, id)
	return err
}

const updateTargetMetadata = `-- name: UpdateTargetMetadata :exec
UPDATE targets SET total=total+$1 AND updatedAt=NOW() WHERE id=$2
`

type UpdateTargetMetadataParams struct {
	Total sql.NullInt64
	ID    int64
}

func (q *Queries) UpdateTargetMetadata(ctx context.Context, arg UpdateTargetMetadataParams) error {
	_, err := q.db.Exec(ctx, updateTargetMetadata, arg.Total, arg.ID)
	return err
}

const updateTemplate = `-- name: UpdateTemplate :exec
UPDATE public.templates SET contents=$1, updatedat=$2 WHERE path=$3
`

type UpdateTemplateParams struct {
	Contents  string
	Updatedat sql.NullTime
	Path      string
}

func (q *Queries) UpdateTemplate(ctx context.Context, arg UpdateTemplateParams) error {
	_, err := q.db.Exec(ctx, updateTemplate, arg.Contents, arg.Updatedat, arg.Path)
	return err
}
